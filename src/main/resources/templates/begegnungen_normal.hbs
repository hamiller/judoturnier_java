<!DOCTYPE html>
<html lang="de">
<header>
  {{> header}}

  <title>Judo-Turniersoftware</title>
  <link rel="stylesheet" href="/css/interface.css">
  <link rel="stylesheet" href="/css/mainstyle.css">
  <link rel="stylesheet" href="/css/baumansicht.css">
</header>
<body>
{{> title }}
{{> nav }}

<div>
  <div class="bodyheader no-print">
    <div class="navbar_fixed">
          <span style="position: relative">
            {{#if isadmin}}
              <md-outlined-button type="button" id="renewBegegnungen" onclick="renewBegegnungen(); return false;">Alle Wettkampfgruppen neu erstellen</md-outlined-button>
              <md-outlined-button type="button" id="deleteBegegnungen" onclick="deleteBegegnungen(); return false;">Alle Wettkampfgruppen löschen</md-outlined-button>
            {{/if}}
          </span>
      {{#each altersklassen}}
        <span style="position: relative">
                <md-filled-tonal-button id="theming-anchor-{{this}}" class="theming-anchors" altersklasse="{{this}}">{{this}}</md-filled-tonal-button>
                <md-menu id="theming-menu-{{this}}" anchor="theming-anchor-{{this}}">
                    <md-menu-item type="button" class="renewBegegnung" id="renewBegegnung_{{this}}" altersklasse="{{this}}">Wettkampfgruppen {{this}} neu zuordnen</md-menu-item>
                    <md-menu-item href="/turnier/{{turnierid}}/begegnungen/randori_printview_matches/{{this}}" target="_blank" class="">Druckansicht {{this}} Begegnungen</md-menu-item>
                    <md-menu-item href="/turnier/{{turnierid}}/begegnungen/randori_printview_matches_inserting_data/{{this}}" target="_blank" class="">Druckansicht {{this}}
                      Wertungen-Eintragen</md-menu-item>
                    <md-menu-item href="/turnier/{{turnierid}}/qrcodes/{{this}}" target="_blank" class="">QR-Codes {{this}}</md-menu-item>
                </md-menu>
            </span>
      {{/each}}
    </div>
  </div>

{{#if preverror}}
    <div class="errormsg">Ein Fehler ist aufgetreten: {{preverror}}</div>
{{/if}}

  <div class="">
    <md-tabs activeTabIndex="0">
      {{#each matten}}
        <md-primary-tab id="matten-tab-{{id}}" class="matten-tabs" mattenid="{{id}}">Matte {{id}}</md-primary-tab>
      {{/each}}
    </md-tabs>
  </div>

  <div class="generalcontent">

    {{#each matten}}
      <div class="matte tabcontent" id="matten-panel-{{id}}">
        <div class="listeneintrag-titel">Matte {{id}}</div>

        <details>
          <summary>Baumansicht</summary>
          {{> baumansicht }}
        </details>
        <div class="wettkampfgruppe">
          {{#each gruppenRunden}}
            {{#each runde}}
              <div class="listeneintrag-header">
                {{#if (istGleich altersklasse null)}}
                  <div class="listeneintrag-titel pause">PAUSE</div>
                {{else}}
                  <div class="listeneintrag-titel">{{gruppe.typ}}</div>
                {{/if}}
              </div>

              {{#each begegnungen}}
                <div class="">Typ {{rundenTyp}} Runde {{runde}} Paarung {{akuellePaarung}}</div>

                <a href="/turnier/{{turnierid}}/begegnungen/normal/{{begegnungId}}">
                  <div class="listeneintrag vs {{wertungVorhanden alleWertungen}}">
                    <div class="wettkaempfer name weiss">{{wettkaempfer1.name}}</div>
                    <div>({{wettkaempfer1.verein.name}})</div>
                    <div class="center">vs</div>
                    <div class="wettkaempfer name rot">{{wettkaempfer2.name}}</div>
                    <div>({{wettkaempfer2.verein.name}})</div>
                  </div>
                </a>
              {{/each}}
            {{/each}}
          {{/each}}
        </div>
      </div>
    {{/each}}
  </div>

</div>
{{> footer}}

<script type="text/javascript">

  document.body.querySelectorAll(".theming-anchors").forEach(value => value.addEventListener("click", (data) => {
    var altersklasse = data.target.attributes.getNamedItem("altersklasse").value;
    console.log("Altersklasse", altersklasse);
    document.body.querySelector("#theming-menu-" + altersklasse).show();
  }));

  const renewBegegnungen = async () => {
    var sicher = confirm("ACHTUNG\n\nHiermit werden alle bisherigen Zuordnung von Wettkämpfern in Wettkampf-Begegnungen gelöscht! \n\nSind sie sicher?");
    if (sicher) {
      console.log("Erstelle alle Begegnungen neu");
      fetch('/turnier/{{turnierid}}/begegnungen', {method: 'POST', redirect: 'follow'})
        .then(response => {
          if (response.redirected) {
            window.location.href = response.url;
          } else if (response.ok) {
            window.location.reload();
          } else {
            console.error('Error:', response.statusText);
          }
        })
    }
  };

  const renewBegegnung = async (data) => {
    var sicher = confirm("ACHTUNG\n\nHiermit werden alle bisherigen Zuordnung von Wettkämpfern in der Altersklasse\n\t" + data + "\nin Wettkampf-Begegnungen gelöscht! \n\nSind sie sicher?");
    if (sicher) {
      console.log("Erstelle die Begegnungen neu", data);
      fetch('/turnier/{{turnierid}}/begegnung', {method: 'POST', body: data, redirect: 'follow'})
        .then(response => {
          if (response.redirected) {
            window.location.href = response.url;
          } else if (response.ok) {
            window.location.reload();
          } else {
            console.error('Error:', response.statusText);
          }
        })
    }
  };

  const deleteBegegnungen = async (altersklasse) => {
    var sicher = confirm("ACHTUNG\n\nHiermit werden alle bisherigen Zuordnung von Wettkämpfern aller Altersklassen\nin Wettkampf-Begegnungen gelöscht! \n\nSind sie sicher?");
    if (sicher) {
      fetch('/turnier/{{turnierid}}/begegnung', {method: 'DELETE', redirect: 'follow'})
        .then(response => {
          if (response.redirected) {
            window.location.href = response.url;
          } else if (response.ok) {
            window.location.reload();
          } else {
            console.error('Error:', response.statusText);
          }
        })
    }
  };

  document.body.querySelectorAll("md-tabs").forEach(tabs => tabs.addEventListener('change', function (data) {
    var mattenid = data.target.activeTab.attributes.getNamedItem("mattenid").value;
    console.log("Tab geändert zu MattenID " + mattenid);

    // Get all elements with class="tabcontent" and hide them
    document.querySelectorAll(".tabcontent").forEach(tab => {
      tab.style.display = "none"
    });

    // Show the current tab, and add an "active" class to the button that opened the tab
    document.getElementById("matten-panel-" + mattenid).style.display = "block";
  }));

  // Show 1st Matte
  document.addEventListener('DOMContentLoaded', function () {
    var tabContent = document.querySelector(".tabcontent");
    if (tabContent) tabContent.style.display = "block";
  });

  document.addEventListener("DOMContentLoaded", () => {
    const matches = document.querySelectorAll(".match");

    matches.forEach((match) => {
      const nextId = match.getAttribute("data-next-id");
      if (nextId) {
        const nextMatch = document.querySelector(`.match[data-prev-id="${nextId}"]`);
        if (nextMatch) {
          match.style.setProperty("--line-to-next", "block");
        }
      }
    });
  });
</script>
</body>

</html>
